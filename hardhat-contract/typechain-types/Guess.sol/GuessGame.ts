/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GuessGame {
  export type GameResultStruct = {
    player: AddressLike;
    username: string;
    correctAnswers: BigNumberish;
    totalPoints: BigNumberish;
  };

  export type GameResultStructOutput = [
    player: string,
    username: string,
    correctAnswers: bigint,
    totalPoints: bigint
  ] & {
    player: string;
    username: string;
    correctAnswers: bigint;
    totalPoints: bigint;
  };

  export type PlayerStruct = {
    playerAddress: AddressLike;
    username: string;
    totalPoints: BigNumberish;
    totalCorrect: BigNumberish;
    currentStreak: BigNumberish;
    stakedAmount: BigNumberish;
    hasPlayed: boolean;
  };

  export type PlayerStructOutput = [
    playerAddress: string,
    username: string,
    totalPoints: bigint,
    totalCorrect: bigint,
    currentStreak: bigint,
    stakedAmount: bigint,
    hasPlayed: boolean
  ] & {
    playerAddress: string;
    username: string;
    totalPoints: bigint;
    totalCorrect: bigint;
    currentStreak: bigint;
    stakedAmount: bigint;
    hasPlayed: boolean;
  };
}

export interface GuessGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "POINTS_PER_CORRECT_ANSWER"
      | "QUESTIONS_PER_GAME"
      | "STREAK_LENGTH"
      | "STREAK_REWARD_POINTS"
      | "allPlayers"
      | "correctAnswers"
      | "currentGameId"
      | "finishGame"
      | "gameResults"
      | "getGameLeaderboard"
      | "getGlobalLeaderboard"
      | "getPlayerDetails"
      | "owner"
      | "players"
      | "resultsGenerated"
      | "setUsername"
      | "submitPredictions"
      | "userPredictions"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameFinished"
      | "PointsUpdated"
      | "PredictionsSubmitted"
      | "ResultsGenerated"
      | "StakeWithdrawn"
      | "StreakReward"
      | "UsernameSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "POINTS_PER_CORRECT_ANSWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUESTIONS_PER_GAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_REWARD_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "correctAnswers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameResults",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalLeaderboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resultsGenerated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUsername", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitPredictions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userPredictions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "POINTS_PER_CORRECT_ANSWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUESTIONS_PER_GAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_REWARD_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correctAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finishGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resultsGenerated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace GameFinishedEvent {
  export type InputTuple = [gameId: BigNumberish];
  export type OutputTuple = [gameId: bigint];
  export interface OutputObject {
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsUpdatedEvent {
  export type InputTuple = [
    player: AddressLike,
    totalCorrect: BigNumberish,
    totalPoints: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    totalCorrect: bigint,
    totalPoints: bigint
  ];
  export interface OutputObject {
    player: string;
    totalCorrect: bigint;
    totalPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionsSubmittedEvent {
  export type InputTuple = [player: AddressLike, answers: BigNumberish[]];
  export type OutputTuple = [player: string, answers: bigint[]];
  export interface OutputObject {
    player: string;
    answers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsGeneratedEvent {
  export type InputTuple = [
    player: AddressLike,
    correctAnswers: BigNumberish[]
  ];
  export type OutputTuple = [player: string, correctAnswers: bigint[]];
  export interface OutputObject {
    player: string;
    correctAnswers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreakRewardEvent {
  export type InputTuple = [
    player: AddressLike,
    streakLength: BigNumberish,
    rewardPoints: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    streakLength: bigint,
    rewardPoints: bigint
  ];
  export interface OutputObject {
    player: string;
    streakLength: bigint;
    rewardPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsernameSetEvent {
  export type InputTuple = [player: AddressLike, username: string];
  export type OutputTuple = [player: string, username: string];
  export interface OutputObject {
    player: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GuessGame extends BaseContract {
  connect(runner?: ContractRunner | null): GuessGame;
  waitForDeployment(): Promise<this>;

  interface: GuessGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  POINTS_PER_CORRECT_ANSWER: TypedContractMethod<[], [bigint], "view">;

  QUESTIONS_PER_GAME: TypedContractMethod<[], [bigint], "view">;

  STREAK_LENGTH: TypedContractMethod<[], [bigint], "view">;

  STREAK_REWARD_POINTS: TypedContractMethod<[], [bigint], "view">;

  allPlayers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  correctAnswers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  currentGameId: TypedContractMethod<[], [bigint], "view">;

  finishGame: TypedContractMethod<[], [void], "nonpayable">;

  gameResults: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        correctAnswers: bigint;
        totalPoints: bigint;
      }
    ],
    "view"
  >;

  getGameLeaderboard: TypedContractMethod<
    [gameId: BigNumberish],
    [GuessGame.GameResultStructOutput[]],
    "view"
  >;

  getGlobalLeaderboard: TypedContractMethod<
    [],
    [GuessGame.PlayerStructOutput[]],
    "view"
  >;

  getPlayerDetails: TypedContractMethod<
    [playerAddress: AddressLike],
    [GuessGame.PlayerStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        playerAddress: string;
        username: string;
        totalPoints: bigint;
        totalCorrect: bigint;
        currentStreak: bigint;
        stakedAmount: bigint;
        hasPlayed: boolean;
      }
    ],
    "view"
  >;

  resultsGenerated: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  setUsername: TypedContractMethod<[_username: string], [void], "nonpayable">;

  submitPredictions: TypedContractMethod<
    [answers: BigNumberish[]],
    [void],
    "payable"
  >;

  userPredictions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawStake: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "POINTS_PER_CORRECT_ANSWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUESTIONS_PER_GAME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_REWARD_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allPlayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "correctAnswers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finishGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameResults"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        player: string;
        username: string;
        correctAnswers: bigint;
        totalPoints: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameLeaderboard"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [GuessGame.GameResultStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlobalLeaderboard"
  ): TypedContractMethod<[], [GuessGame.PlayerStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerDetails"
  ): TypedContractMethod<
    [playerAddress: AddressLike],
    [GuessGame.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean] & {
        playerAddress: string;
        username: string;
        totalPoints: bigint;
        totalCorrect: bigint;
        currentStreak: bigint;
        stakedAmount: bigint;
        hasPlayed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resultsGenerated"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setUsername"
  ): TypedContractMethod<[_username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitPredictions"
  ): TypedContractMethod<[answers: BigNumberish[]], [void], "payable">;
  getFunction(
    nameOrSignature: "userPredictions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "GameFinished"
  ): TypedContractEvent<
    GameFinishedEvent.InputTuple,
    GameFinishedEvent.OutputTuple,
    GameFinishedEvent.OutputObject
  >;
  getEvent(
    key: "PointsUpdated"
  ): TypedContractEvent<
    PointsUpdatedEvent.InputTuple,
    PointsUpdatedEvent.OutputTuple,
    PointsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionsSubmitted"
  ): TypedContractEvent<
    PredictionsSubmittedEvent.InputTuple,
    PredictionsSubmittedEvent.OutputTuple,
    PredictionsSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsGenerated"
  ): TypedContractEvent<
    ResultsGeneratedEvent.InputTuple,
    ResultsGeneratedEvent.OutputTuple,
    ResultsGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "StreakReward"
  ): TypedContractEvent<
    StreakRewardEvent.InputTuple,
    StreakRewardEvent.OutputTuple,
    StreakRewardEvent.OutputObject
  >;
  getEvent(
    key: "UsernameSet"
  ): TypedContractEvent<
    UsernameSetEvent.InputTuple,
    UsernameSetEvent.OutputTuple,
    UsernameSetEvent.OutputObject
  >;

  filters: {
    "GameFinished(uint256)": TypedContractEvent<
      GameFinishedEvent.InputTuple,
      GameFinishedEvent.OutputTuple,
      GameFinishedEvent.OutputObject
    >;
    GameFinished: TypedContractEvent<
      GameFinishedEvent.InputTuple,
      GameFinishedEvent.OutputTuple,
      GameFinishedEvent.OutputObject
    >;

    "PointsUpdated(address,uint256,uint256)": TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
    PointsUpdated: TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;

    "PredictionsSubmitted(address,uint256[10])": TypedContractEvent<
      PredictionsSubmittedEvent.InputTuple,
      PredictionsSubmittedEvent.OutputTuple,
      PredictionsSubmittedEvent.OutputObject
    >;
    PredictionsSubmitted: TypedContractEvent<
      PredictionsSubmittedEvent.InputTuple,
      PredictionsSubmittedEvent.OutputTuple,
      PredictionsSubmittedEvent.OutputObject
    >;

    "ResultsGenerated(address,uint256[10])": TypedContractEvent<
      ResultsGeneratedEvent.InputTuple,
      ResultsGeneratedEvent.OutputTuple,
      ResultsGeneratedEvent.OutputObject
    >;
    ResultsGenerated: TypedContractEvent<
      ResultsGeneratedEvent.InputTuple,
      ResultsGeneratedEvent.OutputTuple,
      ResultsGeneratedEvent.OutputObject
    >;

    "StakeWithdrawn(address,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "StreakReward(address,uint256,uint256)": TypedContractEvent<
      StreakRewardEvent.InputTuple,
      StreakRewardEvent.OutputTuple,
      StreakRewardEvent.OutputObject
    >;
    StreakReward: TypedContractEvent<
      StreakRewardEvent.InputTuple,
      StreakRewardEvent.OutputTuple,
      StreakRewardEvent.OutputObject
    >;

    "UsernameSet(address,string)": TypedContractEvent<
      UsernameSetEvent.InputTuple,
      UsernameSetEvent.OutputTuple,
      UsernameSetEvent.OutputObject
    >;
    UsernameSet: TypedContractEvent<
      UsernameSetEvent.InputTuple,
      UsernameSetEvent.OutputTuple,
      UsernameSetEvent.OutputObject
    >;
  };
}
