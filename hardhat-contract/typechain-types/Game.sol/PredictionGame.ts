/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PredictionGame {
  export type PredictionStruct = {
    questionId: BigNumberish;
    answer: BigNumberish;
    correct: boolean;
    timestamp: BigNumberish;
  };

  export type PredictionStructOutput = [
    questionId: bigint,
    answer: bigint,
    correct: boolean,
    timestamp: bigint
  ] & {
    questionId: bigint;
    answer: bigint;
    correct: boolean;
    timestamp: bigint;
  };

  export type PlayerStruct = {
    playerAddress: AddressLike;
    username: string;
    totalPoints: BigNumberish;
    totalCorrect: BigNumberish;
    currentStreak: BigNumberish;
    predictionHistory: PredictionGame.PredictionStruct[];
  };

  export type PlayerStructOutput = [
    playerAddress: string,
    username: string,
    totalPoints: bigint,
    totalCorrect: bigint,
    currentStreak: bigint,
    predictionHistory: PredictionGame.PredictionStructOutput[]
  ] & {
    playerAddress: string;
    username: string;
    totalPoints: bigint;
    totalCorrect: bigint;
    currentStreak: bigint;
    predictionHistory: PredictionGame.PredictionStructOutput[];
  };
}

export interface PredictionGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_OPTIONS"
      | "POINTS_PER_CORRECT_ANSWER"
      | "QUESTIONS_PER_GAME"
      | "STREAK_LENGTH"
      | "STREAK_REWARD_POINTS"
      | "allPlayers"
      | "createQuestion"
      | "currentQuestionId"
      | "getLeaderboard"
      | "getPlayerDetails"
      | "lastLeaderboardUpdate"
      | "leaderboard"
      | "owner"
      | "players"
      | "predict"
      | "questions"
      | "resolveQuestion"
      | "setUsername"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PredictionSubmitted"
      | "QuestionCreated"
      | "QuestionResolved"
      | "RewardDistributed"
      | "StreakReward"
      | "UsernameSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_OPTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POINTS_PER_CORRECT_ANSWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUESTIONS_PER_GAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STREAK_REWARD_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createQuestion",
    values: [
      string,
      [string, string, string, string],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentQuestionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLeaderboardUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predict",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveQuestion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUsername", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "MAX_OPTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POINTS_PER_CORRECT_ANSWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUESTIONS_PER_GAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STREAK_REWARD_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentQuestionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLeaderboardUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "predict", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsername",
    data: BytesLike
  ): Result;
}

export namespace PredictionSubmittedEvent {
  export type InputTuple = [
    player: AddressLike,
    questionId: BigNumberish,
    answer: BigNumberish,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    questionId: bigint,
    answer: bigint,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    player: string;
    questionId: bigint;
    answer: bigint;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestionCreatedEvent {
  export type InputTuple = [
    questionId: BigNumberish,
    text: string,
    duration: BigNumberish,
    resolutionWindow: BigNumberish,
    timeLimit: BigNumberish
  ];
  export type OutputTuple = [
    questionId: bigint,
    text: string,
    duration: bigint,
    resolutionWindow: bigint,
    timeLimit: bigint
  ];
  export interface OutputObject {
    questionId: bigint;
    text: string;
    duration: bigint;
    resolutionWindow: bigint;
    timeLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuestionResolvedEvent {
  export type InputTuple = [
    questionId: BigNumberish,
    correctAnswer: BigNumberish
  ];
  export type OutputTuple = [questionId: bigint, correctAnswer: bigint];
  export interface OutputObject {
    questionId: bigint;
    correctAnswer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributedEvent {
  export type InputTuple = [player: AddressLike, rewardAmount: BigNumberish];
  export type OutputTuple = [player: string, rewardAmount: bigint];
  export interface OutputObject {
    player: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreakRewardEvent {
  export type InputTuple = [
    player: AddressLike,
    streakLength: BigNumberish,
    rewardPoints: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    streakLength: bigint,
    rewardPoints: bigint
  ];
  export interface OutputObject {
    player: string;
    streakLength: bigint;
    rewardPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsernameSetEvent {
  export type InputTuple = [player: AddressLike, username: string];
  export type OutputTuple = [player: string, username: string];
  export interface OutputObject {
    player: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredictionGame extends BaseContract {
  connect(runner?: ContractRunner | null): PredictionGame;
  waitForDeployment(): Promise<this>;

  interface: PredictionGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_OPTIONS: TypedContractMethod<[], [bigint], "view">;

  POINTS_PER_CORRECT_ANSWER: TypedContractMethod<[], [bigint], "view">;

  QUESTIONS_PER_GAME: TypedContractMethod<[], [bigint], "view">;

  STREAK_LENGTH: TypedContractMethod<[], [bigint], "view">;

  STREAK_REWARD_POINTS: TypedContractMethod<[], [bigint], "view">;

  allPlayers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createQuestion: TypedContractMethod<
    [
      text: string,
      options: [string, string, string, string],
      duration: BigNumberish,
      resolutionWindow: BigNumberish,
      timeLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  currentQuestionId: TypedContractMethod<[], [bigint], "view">;

  getLeaderboard: TypedContractMethod<
    [],
    [[string[], string[], bigint[]]],
    "view"
  >;

  getPlayerDetails: TypedContractMethod<
    [playerAddress: AddressLike],
    [PredictionGame.PlayerStructOutput],
    "view"
  >;

  lastLeaderboardUpdate: TypedContractMethod<[], [bigint], "view">;

  leaderboard: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint] & {
        playerAddress: string;
        username: string;
        totalPoints: bigint;
        totalCorrect: bigint;
        currentStreak: bigint;
      }
    ],
    "view"
  >;

  predict: TypedContractMethod<
    [questionId: BigNumberish, answer: BigNumberish],
    [void],
    "payable"
  >;

  questions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        text: string;
        correctAnswer: bigint;
        createdAt: bigint;
        deadline: bigint;
        resolveBy: bigint;
        timeLimit: bigint;
        resolved: boolean;
        totalStakes: bigint;
      }
    ],
    "view"
  >;

  resolveQuestion: TypedContractMethod<
    [questionId: BigNumberish, correctAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUsername: TypedContractMethod<[_username: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_OPTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POINTS_PER_CORRECT_ANSWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUESTIONS_PER_GAME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STREAK_REWARD_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allPlayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createQuestion"
  ): TypedContractMethod<
    [
      text: string,
      options: [string, string, string, string],
      duration: BigNumberish,
      resolutionWindow: BigNumberish,
      timeLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentQuestionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<[], [[string[], string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getPlayerDetails"
  ): TypedContractMethod<
    [playerAddress: AddressLike],
    [PredictionGame.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastLeaderboardUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "leaderboard"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint] & {
        playerAddress: string;
        username: string;
        totalPoints: bigint;
        totalCorrect: bigint;
        currentStreak: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "predict"
  ): TypedContractMethod<
    [questionId: BigNumberish, answer: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        text: string;
        correctAnswer: bigint;
        createdAt: bigint;
        deadline: bigint;
        resolveBy: bigint;
        timeLimit: bigint;
        resolved: boolean;
        totalStakes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resolveQuestion"
  ): TypedContractMethod<
    [questionId: BigNumberish, correctAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUsername"
  ): TypedContractMethod<[_username: string], [void], "nonpayable">;

  getEvent(
    key: "PredictionSubmitted"
  ): TypedContractEvent<
    PredictionSubmittedEvent.InputTuple,
    PredictionSubmittedEvent.OutputTuple,
    PredictionSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "QuestionCreated"
  ): TypedContractEvent<
    QuestionCreatedEvent.InputTuple,
    QuestionCreatedEvent.OutputTuple,
    QuestionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "QuestionResolved"
  ): TypedContractEvent<
    QuestionResolvedEvent.InputTuple,
    QuestionResolvedEvent.OutputTuple,
    QuestionResolvedEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributed"
  ): TypedContractEvent<
    RewardDistributedEvent.InputTuple,
    RewardDistributedEvent.OutputTuple,
    RewardDistributedEvent.OutputObject
  >;
  getEvent(
    key: "StreakReward"
  ): TypedContractEvent<
    StreakRewardEvent.InputTuple,
    StreakRewardEvent.OutputTuple,
    StreakRewardEvent.OutputObject
  >;
  getEvent(
    key: "UsernameSet"
  ): TypedContractEvent<
    UsernameSetEvent.InputTuple,
    UsernameSetEvent.OutputTuple,
    UsernameSetEvent.OutputObject
  >;

  filters: {
    "PredictionSubmitted(address,uint256,uint256,uint256)": TypedContractEvent<
      PredictionSubmittedEvent.InputTuple,
      PredictionSubmittedEvent.OutputTuple,
      PredictionSubmittedEvent.OutputObject
    >;
    PredictionSubmitted: TypedContractEvent<
      PredictionSubmittedEvent.InputTuple,
      PredictionSubmittedEvent.OutputTuple,
      PredictionSubmittedEvent.OutputObject
    >;

    "QuestionCreated(uint256,string,uint256,uint256,uint256)": TypedContractEvent<
      QuestionCreatedEvent.InputTuple,
      QuestionCreatedEvent.OutputTuple,
      QuestionCreatedEvent.OutputObject
    >;
    QuestionCreated: TypedContractEvent<
      QuestionCreatedEvent.InputTuple,
      QuestionCreatedEvent.OutputTuple,
      QuestionCreatedEvent.OutputObject
    >;

    "QuestionResolved(uint256,uint256)": TypedContractEvent<
      QuestionResolvedEvent.InputTuple,
      QuestionResolvedEvent.OutputTuple,
      QuestionResolvedEvent.OutputObject
    >;
    QuestionResolved: TypedContractEvent<
      QuestionResolvedEvent.InputTuple,
      QuestionResolvedEvent.OutputTuple,
      QuestionResolvedEvent.OutputObject
    >;

    "RewardDistributed(address,uint256)": TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
    RewardDistributed: TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;

    "StreakReward(address,uint256,uint256)": TypedContractEvent<
      StreakRewardEvent.InputTuple,
      StreakRewardEvent.OutputTuple,
      StreakRewardEvent.OutputObject
    >;
    StreakReward: TypedContractEvent<
      StreakRewardEvent.InputTuple,
      StreakRewardEvent.OutputTuple,
      StreakRewardEvent.OutputObject
    >;

    "UsernameSet(address,string)": TypedContractEvent<
      UsernameSetEvent.InputTuple,
      UsernameSetEvent.OutputTuple,
      UsernameSetEvent.OutputObject
    >;
    UsernameSet: TypedContractEvent<
      UsernameSetEvent.InputTuple,
      UsernameSetEvent.OutputTuple,
      UsernameSetEvent.OutputObject
    >;
  };
}
