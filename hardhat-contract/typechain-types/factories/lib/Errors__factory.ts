/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Errors, ErrorsInterface } from "../../lib/Errors";

const _abi = [
  {
    inputs: [],
    name: "AlreadyPredicted",
    type: "error",
  },
  {
    inputs: [],
    name: "CoreTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadlineNotReached",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAnswer",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCorrectAnswer",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidQuestionID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidStakeAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxQuestionsReached",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "PredictionPeriodEnded",
    type: "error",
  },
  {
    inputs: [],
    name: "ResolutionWindowExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "ResultAlreadySet",
    type: "error",
  },
  {
    inputs: [],
    name: "TimeLimitExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "TimeLimitInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "UsernameEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "UsernameTaken",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122010e884d39651753dfab546e81e1f2a6435ab5646f820242a888410b89e4f8c3d64736f6c634300081c0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
